Module used and role
  hashlib:编码
  pickle：存取文件
  numpy：矩阵计算
  collections：
    collections.Counter：统计数据格式转换
    collections.defaultdict:建立图结构
  torch:  建立tensor数据类型
    torch.optim:优化算法 optim.SparseAdam：适用于稀疏张量的Adam优化方法
    torch.nn.embedding: 词向量嵌入模块
  sklearn:
    sklearn.linear_model.LogisticRegression：逻辑回归分类算法
    sklearn.model_selection.KFold:k则验证

File run flow path:
  main.py
    graph_struct.py
  model_data.py
    model.py
  classifier.py
  
Code run flow path:
  main.py
    1读取数据：边数据，节点数据，节点标签数据
    2建立图结构(graph_struct.py.Graph)
    3给节点重新标签：建立字典 1节点对应图 2节点对应节点标签 3节点对应节点新标签（结合1、2）
    4图嵌入(graph_struct.py.getsub()):整合节点类型、图的d阶子图结构
  model_data.py
    5读取图嵌入结果
    6建立子图级别词汇表：1从图嵌入结果提取全部子图表示 2统计每种子图出现次数，并筛选高于5次的子图结构建立子图词汇表 3根据子图词汇表更新图嵌入结果（去掉频率小于5的子图）
  Graph2vector训练过程：
    7选择模型(model.py.SkipGramModel)
    8建立采样表：按频率扩大样本序号，为随机抽样提供方便
    9选择优化器模型：SparseAdam
    10模型进入训练模式(model.py)
    11设置GPU
    12训练：对于每一代
              对于每个图
                1梯度清零 
                2提取图的id,图的子图id集合 
                3对于图中每个子图
                    1随机抽取2个负样本 
                    2前向传播：
                        向量化：中心词-图id,正样本-子图id,负样本-随机抽取2个
                        计算正采样、负采样loss及总loss
                    3反向传播,更新学习率
    13保存图嵌入结果graph2vector： 188*1024：188个图,1024维向量
  classifier.py
    14读取数据：图标签,图的向量表示结果(/weights.txt)
    15KFold样本分类
    16LogisticRegression算法训练
    17计算训练集、测试集准确率
                        
